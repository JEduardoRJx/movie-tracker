{"version":3,"sources":["utils/apiCalls.js","actions/index.js","Containers/MovieCard/MovieCard.js","Containers/MoviesContainer/MoviesContainer.js","Components/CardDetails/CardDetails.js","Containers/Header/Header.js","Containers/App/App.js","reducers/index.js","reducers/movies.js","reducers/errorMsg.js","reducers/user.js","reducers/favorites.js","index.js"],"names":["fetchMovies","a","async","url","fetch","response","ok","Error","json","movies","results","map","movie","backdrop_path","genre_ids","id","overview","poster_path","release_date","title","vote_average","isFavorite","addFavorite","userId","options","method","body","JSON","stringify","movie_id","headers","addedFav","getFavorites","favoriteMovies","removeFavorite","favId","toggleFav","type","connect","user","dispatch","date","poster","fixedDate","refreshFavs","Date","toString","split","slice","join","className","to","src","alt","favorites","viewAll","makeCards","key","vote","releaseDate","setUser","clearFavs","name","App","props","throwError","setFavs","updatedFavs","message","this","addMovies","errorMsg","exact","path","render","match","foundMovie","find","parseInt","params","undefined","Component","favs","rootReducer","combineReducers","state","action","forEach","fav","store","createStore","composeWithDevTools","router","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.acb7dddd.chunk.js","sourcesContent":["const baseUrl = 'https://api.themoviedb.org/3/movie/now_playing?';\n// const apiKey = '1b20ae1afe685b2871c8d94218f89eba';\nconst apiKey2 = 'cee1e60becdb4297de68233fbef2f560';\n\nexport const fetchMovies = async () => {\n  const url = `${baseUrl}api_key=${apiKey2}&language=en-US`\n  const response = await fetch(url)\n    if (!response.ok) {\n      throw Error(\"There was an issue retrieving your movies. Please try again.\");\n    }\n  let movies = await response.json();\n  movies = movies.results.map(movie => {\n    const { backdrop_path, genre_ids, id, overview, poster_path, release_date, title, vote_average } = movie\n    return { backdrop_path, genre_ids, id, overview, poster_path, release_date, title, vote_average, isFavorite: false }\n  })\n  return movies\n};\n\nexport const postUser = async user => {\n  const url = 'http://localhost:3001/api/v1/login';\n  const options = {\n    method: 'POST',\n    body: JSON.stringify({\n      email: user.email,\n      password: user.password\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const response = await fetch(url, options);\n  if (!response.ok && response.status !== 401) {\n    throw Error('Sorry, unable to retrieve your account. Try again later.')\n  }\n  const foundUser = await response.json();\n  if (response.status === 401) {\n    throw new Error('Username or password incorrect')\n  }\n  return foundUser;\n}\n\nexport const addUser = async user => {\n  const url = 'http://localhost:3001/api/v1/users';\n  const options = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: user.name,\n      email: user.email,\n      password: user.password\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const response = await fetch(url, options);\n    if (!response.ok && response.status !== 500) {\n     throw Error('Sorry, unable to create your account. Try again later.')\n  }\n  const newUser = await response.json();\n    if (response.status === 500) {\n      throw new Error('There is already an account with this email. Go to login or use another email address.')\n  }\n  return newUser;\n}\n\nexport const addFavorite = async (userId, movie) => {\n  const url = `http://localhost:3001/api/v1/users/${userId}/moviefavorites`;\n  const options = {\n    method: 'POST',\n    body: JSON.stringify({\n      movie_id: movie.id, \n      title: movie.title, \n      poster_path: movie.poster_path, \n      release_date: movie.release_date, \n      vote_average: movie.vote_average, \n      overview: movie.overview\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const response = await fetch(url, options)\n  if(!response.ok) {\n    throw Error('Unable to add movie as favorite. Try again later.')\n  }\n  const addedFav = await response.json();\n  return addedFav;\n}\n\nexport const getFavorites = async userId => {\n  const url = `http://localhost:3001/api/v1/users/${userId}/moviefavorites`;\n  const response = await fetch(url)\n  if(!response.ok) {\n    throw Error('Unable to retrieve your favorite movies as this time. Please try again later')\n  }\n  const favoriteMovies = await response.json()\n  return favoriteMovies\n}\n\nexport const removeFavorite = async (userId, favId) => {\n  const url = `http://localhost:3001/api/v1/users/${userId}/moviefavorites/${favId}`;\n  const options = {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const response = await fetch(url, options)\n  if(!response.ok) {\n    throw Error('Unable to remove this movie as a favorite at this time. Please try again later')\n  }\n}","export const addMovies = movies => ({\n\ttype: 'ADD_MOVIES',\n\tmovies\n});\n\nexport const throwError = errorMsg => ({\n  type: 'THROW_ERROR',\n  errorMsg\n});\n\nexport const setUser = user => ({\n\ttype: 'SET_USER',\n\tuser\n});\n\nexport const toggleFav = id => ({\n\ttype: 'TOGGLE_FAV',\n\tid\n});\n\nexport const setFavs = favs => ({\n  type: 'SET_FAVS',\n  favs\n});\n\nexport const updateFavs = favs => ({\n  type: 'UPDATE_FAVS',\n  favs\n});\n\nexport const clearFavs = () => ({\n  type: 'CLEAR_FAVS',\n});","import React from 'react';\nimport { connect } from 'react-redux';\nimport { toggleFav } from '../../actions';\nimport  './MovieCard.scss';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({ id, title, date, poster, movie, isFavorite, toggleFav, user, refreshFavs }) => {\n\n  const fixedDate = new Date(date + 'T00:00').toString().split(' ').slice(1, 4).join(' ');\n\n  // const favStatus = isFavorite ? 'Remove Favorite' : 'Add Favorite';\n  // const toggleFavColor = isFavorite ? 'favorited' : '';\n  return (\n    <article className='movie-card' id={id}>\n      <div className='movie-details'>\n        <h2>{title}</h2>\n        <h3>{fixedDate}</h3>\n        {/* <button \n          className={`fav-btn ${toggleFavColor}`}\n          type=\"button\"\n          disabled={!user}\n          onClick={() => {\n            toggleFav(id);\n            refreshFavs(movie);\n          }}\n        >{favStatus}</button> */}\n      </div>\n      <Link to={`/movies/${id}`}>\n        <img \n          className='poster'\n          src={`http://image.tmdb.org/t/p/w1280${poster}`} \n          alt=\"Movie poster\" \n        />\n      </Link>\n    </article>\n  )\n}\n\nexport const mapStateToProps = ({ user }) => ({\n  user\n})\n\nexport const mapDispatchToProps = dispatch => ({\n  toggleFav: id => dispatch(toggleFav(id)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieCard);\n\n\nMovieCard.propTypes = {\n  // id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  isFavorite: PropTypes.bool.isRequired,\n  toggleFav: PropTypes.func.isRequired,\n  // movie: PropTypes.object.isRequired,\n  user: PropTypes.object\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport  MovieCard from '../MovieCard/MovieCard';\nimport './MoviesContainer.scss';\n\nconst MoviesContainer = ({ viewAll, movies, favorites, refreshFavs }) => {\n  const view = viewAll ? movies : favorites;\n  const makeCards = view.map(\n    movie => {\n    return <MovieCard \n      key={movie.id}\n      id={movie.id}\n      title={movie.title}\n      date={movie.release_date}\n      poster={movie.poster_path}\n      vote={movie.vote_average}\n      overview={movie.overview}\n      isFavorite={movie.isFavorite}\n      movie={movie}\n      refreshFavs={refreshFavs}\n    />\n  })\n  return (\n    <section className='movie-container'>\n      {makeCards}\n    </section>\n    )\n}\n\nconst mapStateToProps = ({ movies, favorites }) => ({\n  movies,\n  favorites\n})\n\nexport default connect(mapStateToProps)(MoviesContainer);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { toggleFav } from '../../actions';\nimport './CardDetails.scss';\nimport PropTypes from 'prop-types';\n\nexport const CardDetails = ({ movie, refreshFavs, user, toggleFav }) => {\n  const {backdrop_path, \n    // id, isFavorite, \n    overview, poster_path, release_date, title, vote_average} = movie;\n\n  const releaseDate = new Date(release_date + 'T00:00').toString().split(' ').slice(1, 4).join(' ');\n\n  // const favStatus = isFavorite ? 'Remove Favorite' : 'Add Favorite';\n\n  return (\n    <section className=\"cardDetails\">\n      <img \n        className='movie-backdrop' \n        src={`http://image.tmdb.org/t/p/w1280${backdrop_path}`} \n        alt='movie backdrop' \n      />\n      <article className='movie-details-wrapper'>\n        <img \n          className='movie-poster' \n          src={`http://image.tmdb.org/t/p/w1280${poster_path}`} \n          alt='movie poster' \n        />\n        <div className='movie-info-wrapper'>\n          <h1 className='movie-title'>{title}</h1>\n          <h2>Released: {releaseDate}</h2>\n          <p>{overview}</p>\n          <h2>Vote Average: {vote_average}</h2>\n          {/* <button \n            className='fav-btn-wrapper' \n            type=\"button\"\n            disabled={!user}\n            onClick={() => {\n              toggleFav(id);\n              refreshFavs(movie);\n            }}\n          >{favStatus}</button> */}\n          <Link to='/'>\n            <button \n              className='back-btn' \n              type='button'\n            >◀ back</button>\n          </Link>\n        </div>\n      </article>\n    </section>\n  )\n}\n\nexport const mapStateToProps = ({ user }) => ({\n  user\n})\n\nexport const mapDispatchToProps = dispatch => ({\n  toggleFav: id => dispatch(toggleFav(id))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardDetails);\n\nCardDetails.propTypes = {\n  movie: PropTypes.object,\n  refreshFavs: PropTypes.func,\n  toggleFavs: PropTypes.func,\n  user: PropTypes.object\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setUser, clearFavs } from '../../actions';\n\nimport './Header.scss';\n\nconst Header = ({ user, setUser, clearFavs, favorites }) => {\n  return (\n    <header>\n      <h1 className='header-title'>Movie Tracker</h1>\n      <div className='header-btn-wrapper'>\n        {user !== null && <h2>Welcome {user.name}</h2>}\n        {/* <Link to='/favorites'>\n          <button \n            className='view-favs nav-btn'\n            disabled={!user}\n          >View Favorites</button>\n        </Link> */}\n        {/* <Link to='/login'>\n          <button \n            className='login nav-btn'\n            disabled={user}\n            >Login</button>\n          </Link> */}\n        {/* <Link to='/createaccount'>\n          <button \n            className='create nav-btn'\n            disabled={user}\n            >Create Account</button>\n        </Link> */}\n        {/* <Link to='/' onClick={() => {\n              setUser(null);\n              clearFavs();\n            }}>\n          <button \n            className='signout nav-btn'\n            disabled={!user}\n          >Sign Out</button>\n        </Link> */}\n        <Link to='/'>\n          <button \n            className='home nav-btn'\n          >Back to All Movies</button>\n        </Link>\n      </div>\n    </header>\n  )\n}\n\nconst mapStateToProps = ({ user, favorites }) => ({\n  user, \n  favorites\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setUser: user => dispatch(setUser(user)),\n  clearFavs: () => dispatch(clearFavs())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React, { Component } from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { fetchMovies, getFavorites, addFavorite, removeFavorite } from '../../utils/apiCalls';\nimport { addMovies, throwError, setFavs } from '../../actions';\nimport MoviesContainer from '../MoviesContainer/MoviesContainer';\nimport CardDetails from '../../Components/CardDetails/CardDetails';\n// import CreateAccount from '../CreateAccount/CreateAccount'\n// import LoginForm from '../LoginForm/LoginForm';\nimport Header from '../Header/Header';\nimport './App.scss';\n\nexport class App extends Component {\n\n  async componentDidMount() {\n    const { addMovies, throwError } = this.props\n    try {\n      const movies = await fetchMovies();\n      addMovies(movies)\n    } catch({ message }) {\n      throwError(message)\n    }\n  }\n\n  refreshFavs = async (movie) => {\n    const { throwError, setFavs, user } = this.props;\n    try {\n      if (movie.isFavorite) {\n        await removeFavorite(user.id, movie.id)\n      } else {\n        await addFavorite(user.id, movie)\n      }\n        const updatedFavs = await getFavorites(user.id)\n        setFavs(updatedFavs)\n      } catch ({ message }) {\n        throwError(message)\n      }\n  } \n\n  render() {\n    const { errorMsg, \n      user \n    } = this.props\n    return (\n      <div className=\"App\">\n        {/* <Redirect to='/' /> */}\n        <Header />\n          {errorMsg && <h2>{errorMsg}</h2>}\n          <Route exact path='/' render={() => <MoviesContainer viewAll={true} refreshFavs={this.refreshFavs}/>}/>\n          {/* <Route path='/login' render={() => <LoginForm />} /> */}\n          {/* <Route path='/createaccount' render={() => <CreateAccount />} /> */}\n          {/* <Route path='/favorites' render={() => <MoviesContainer viewAll={false} refreshFavs={this.refreshFavs}/>}/> */}\n          <Route\n            path=\"/movies/:id\"\n            render={({ match }) => {\n              let foundMovie = this.props.movies.find(movie => {\n                return movie.id === parseInt(match.params.id);\n              });\n\n              if(foundMovie === undefined) {\n                  return (<Redirect to='/' />)\n              } else {\n                  return (\n                    <CardDetails\n                      key={foundMovie.id}\n                      movie={foundMovie}\n                      refreshFavs={this.refreshFavs}\n                  />\n                );\n              }\n\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport const mapStateToProps = ({ errorMsg, user, movies }) => ({\n  errorMsg,\n  user,\n  movies\n})\n\nexport const mapDispatchToProps = dispatch => ({\n  addMovies: movies => dispatch(addMovies(movies)),\n  throwError: errorMsg => dispatch(throwError(errorMsg)),\n  setFavs: favs => dispatch(setFavs(favs)) \n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { movies } from './movies';\nimport { errorMsg } from './errorMsg';\nimport { user } from './user';\nimport { favorites } from './favorites';\n\nexport const rootReducer = combineReducers({\n  movies,\n  errorMsg,\n  user,\n  favorites\n});","export const movies = (state=[], action) => {\n  switch (action.type) {\n    case 'ADD_MOVIES':\n      return action.movies\n    case 'TOGGLE_FAV':\n      return state.map(movie => {\n        if (movie.id === action.id) {\n          return {...movie, isFavorite: !movie.isFavorite}\n        } else {\n          return movie\n        }\n      })\n    case 'UPDATE_FAVS':\n      return state.map(movie => {\n        action.favs.favorites.forEach(fav => {\n          if(fav.movie_id === movie.id) {\n            movie.isFavorite = true;\n          }\n        })\n          return movie;\n      })\n    default:\n      return state;\n  }\n}","export const errorMsg = (state='', action) => {\n  switch (action.type) {\n    case 'THROW_ERROR':\n      return action.errorMsg\n    default:\n      return state;\n  }\n}","export const user = (state = null, action) => {\n  switch(action.type) {\n    case 'SET_USER':\n      return action.user\n    default: \n      return state\n  }\n}\n\n","export const favorites = (state=[], action) => {\n  switch (action.type) {\n    case 'SET_FAVS': \n      return action.favs.favorites.map(movie => {\n        movie.id = movie.movie_id\n        return {...movie, isFavorite: true}\n      })\n    case 'CLEAR_FAVS':\n        return []\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './Containers/App/App';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer } from './reducers';\nimport { BrowserRouter } from 'react-router-dom'\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nconst router = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(\n<Provider store={store}>\n  {router}\n</Provider>,\ndocument.getElementById('root'));\n\n"],"sourceRoot":""}